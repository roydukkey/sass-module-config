// Copyright (c) roydukkey. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.
////
/// @author roydukkey
/// @group tests
/// @deprecated This file uses the bracket syntax until multi-line maps are supported. @link http://github.com/sass/sass/issues/216
////

@use 'sass:list' as sass-list;
@use 'sass:meta';
@use 'src/internal/map';
@use 'true';


@include true.describe('@function internal.map-select') {

	$config: (
		null: 'NULL', // Same as `&:`
		one: 'a',
		two: (
			&: 'b',
			five: 'E',
			six: (
				&: 'F',
				seven: 'G'
			)
		),
		three: 'c',
		4: 'd',
		#000: 'black',
		true: 'TRUE',
		false: 'FALSE'
	);

	@include true.it('Selects a value from a map by a single key as a string') {
		@each $option, $expected in (
			(one, 'a'),
			('three', 'c')
		) {
			$assert: map.select($config, $option);
			@include true.assert-equal($assert, $expected, '[#{meta.inspect($option)}] >> ');
		}
	}

	@include true.it('Selects a value from a map by a single key as a number') {
		$assert: map.select($config, 4);
		$expected: 'd';
		@include true.assert-equal($assert, $expected);
	}

	@include true.it('Selects a value from a map by a single key as a color') {
		$assert: map.select($config, #000);
		$expected: 'black';
		@include true.assert-equal($assert, $expected);
	}

	@include true.it('Selects a value from a map by a single key as a boolean') {
		@each $option, $expected in (
			(true, 'TRUE'),
			(false, 'FALSE')
		) {
			$assert: map.select($config, $option);
			@include true.assert-equal($assert, $expected, '[#{meta.inspect($option)}] >> ');
		}
	}

	@include true.it('Selects a value from a map by multiple keys') {
		@each $option, $expected in (
			(two five, 'E'),
			(two six seven, 'G')
		) {
			$assert: map.select($config, $option);
			@include true.assert-equal($assert, $expected, '[#{meta.inspect($option)}] >> ');
		}
	}

	@include true.it('Selects a default value from a map by the given key/s') {
		@each $option, $expected in (
			(null, 'NULL'),
			(&, 'NULL'),
			(two, 'b'),
			(two six, 'F')
		) {
			$assert: map.select($config, $option);
			@include true.assert-equal($assert, $expected, '[#{meta.inspect($option)}] >> ');
		}
	}

}
