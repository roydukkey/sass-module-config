// Copyright (c) roydukkey. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.
////
/// @author roydukkey
/// @group internal
////

@use 'exception'
@use 'sass:list'
@use 'sass:math'
@use 'sass:meta'


///
/// Returns a copy of a list with the specified value added to the beginning.
///
/// @remarks If `$separator` is 'comma', the returned list is comma-separted. If it's 'space', the returned list is space-separated. If it's 'auto' (the default), the returned list will use the same separator as `$list` (or 'space' if `$list` doesn't have a separator). Other values aren't allowed.
///
/// @param {List} $list - List to which the value should be prepened.
/// @param {*} $value - Value to prepend to the list.
/// @param {'auto'|'comma'|'space'} $separator - The type of separator the returned list should use.
/// @return {List}
///
/// @access private
///
@function prepend($list, $value, $separator: 'auto')
	@return list.join($value, $list, $separator)


///
/// Removes a value from a list at the specified index.
///
/// @param {List} $list - List containing the value to be removed.
/// @param {Number} $index - Index indicating the value to be removed.
/// @return {List}
///
/// @throw $index: `#{$index}` is not a number for `nth-remove()`
/// @throw List index must be a non-zero integer for `nth-remove()`
/// @throw List index is `#{$index}` but list is only `#{length($list)}` item long for `nth-remove()`
///
/// @access private
/// @require exception.type-error
///
@function nth-remove($list, $index)
	$result: ()

	@if meta.type-of($index) != 'number'
		@error exception.type-error('nth-remove', 'index', 'number', $index)

	@else if $index == 0
		@error 'List index must be a non-zero integer for `nth-remove()`'

	@else if math.abs($index) > list.length($list)
		@error 'List index is `#{$index}` but list is only `#{list.length($list)}` item long for `nth-remove()`'

	@else
		$index: if($index < 0, list.length($list) + $index + 1, $index)

		@for $i from 1 through list.length($list)
			@if $i != $index
				$result: list.append($result, list.nth($list, $i))

	@return $result
